# Save the dictionary
write_csv(label_dictionary, "data/metadata/label_dictionary_raw.csv")
# Remove any non-data events: logs, end-of-study summaries
redcap_filtered <- redcap_raw %>%
filter(!redcap_event_name %in% c("logs_arm_1", "end_of_study_arm_1"))
# Preview changes made
redcap_filtered
# Define variables to keep based on manual curation
keep_vars <- c(
"subject_id", "redcap_event_name", "reg_age", "reg_grp",
"hw_wght", "hw_hght", "dem_sex", "dem_eth",
"dem_ethwht", "dem_ethblck", "dem_ethasn", "dem_ethmix", "dem_ethoth",
"dem_ukdiag1", "dem_ukdiag2", "dem_ukdiag3", "dem_ukdiag4", "dem_ukdiag5", "dem_ukdiag6",
"ectrt_corti1", "ectrt_corti1cls", "ectrt_add1", "ectrt_corti1cls_2", "ectrt_add2", "ectrt_corti1cls_3",
"ectrt_calci1", "ectrt_cakci1drg", "ectrt_calci2", "ectrt_cakci2drg_2", "ectrt_calci3", "ectrt_cakci3drg_3",
"ectrt_st", "ectrt_st_add1",
"mh_asthma", "mh_rhino", "mh_fdalle", "mh_ctalle", "mh_slpdist",
"sbfa_twel", "sbfa_twel_det2", "sbfa_arm_flux1", "sbfa_arm_flux2", "sbfa_arm_flux3",
"sbfa_arm_cur", "sbfa_temp", "sbfa_humidity",
"sbfa_ph", "sbfa_ph_det", "sbfa_ph1", "sbfa_ph2", "sbfa_ph3",
"se_easi", "bmsi_adverse_score", "bmsi_capable_score", "bmsi_response_score",
"btms_bm_score", "btms_bthreat_score", "btms_tscore",
"vas_score", "skinqol_used", "skinqol_score", "patientreported_quality_of_life_measures_complete",
"sdc_srbd_scale", "sdc_sleepiness_scale", "sdc_restless_leg_scale",
"sdc_mtainsc", "sdc_mtainsc_tscore",
"sdsc_breath", "sdc_breath_tscore", "sdsc_arousal", "sdc_arousal_tscore",
"sdsc_transit", "sdc_transit_tscore", "sdsc_somnol", "sdc_somnol_tscore",
"sdsc_hyper", "sdc_hyper_tscore", "sdsc_tscore", "total_t_score",
"ehi_tscore", "wasi_fsiq4", "gonogo_resp", "simon_presp",
"cpt_prerrors", "mack_mskips", "mack_iskips"
)
# Subset only the selected variables
redcap_core_vars <- redcap_filtered %>%
select(all_of(keep_vars))
# View preview
redcap_core_vars
# Save cleaned core dataset
write_csv(redcap_core_vars, "data/cleaned/redcap_core_vars.csv")
# Load label dictionary
label_dict <- read_csv("data/metadata/label_dictionary_clean.csv")
# Create a named vector for renaming: names = new (clean), values = current (snake_case)
rename_vector <- setNames(label_dict$snake_case, label_dict$clean)
# Safety check: preview which columns will be renamed
matched_cols <- intersect(names(rename_vector), colnames(redcap_core_vars))
cat("Columns that will be renamed:\n")
print(rename_vector[matched_cols])
# Rename the columns
redcap_clean_labels <- redcap_core_vars %>%
rename(any_of(rename_vector))
# Preview result
redcap_clean_labels
unique(redcap_clean_labels$visit_number)
unique(redcap_clean_labels$visit_number)
# Clean subject_id and redcap_event_name, save as new object
redcap_clean <- redcap_clean_labels %>%
mutate(
# Convert subject_id like "728-X" → "MSXX"
subject_id = str_pad(str_extract(subject_id, "\\d+$"), width = 2, pad = "0"),
subject_id = paste0("MS", subject_id),
# Convert visit_number (already renamed) into numeric ID: 1 = baseline, 2 = follow-up
visit_number = case_when(
visit_number == "baseline_visit_1_arm_1" ~ 1L,
visit_number == "6_month_followup_arm_1" ~ 2L,
TRUE ~ NA_integer_
)
)
# Preview to ensure changes made
redcap_clean
# Save cleaned dataset
write_csv(redcap_clean, "data/cleaned/redcap_clean.csv")
# Read Redcap csv with snake_case
redcap_raw <- read_csv("data/raw/MindSkinVer40_DATA_2025-01-22_1418.csv")
# Preview the raw database
redcap_raw
# Extract clean column labels from the LABELS file
label_names <- names(read_csv("data/raw/MindSkinVer40_DATA_LABELS_2025-01-22_1419.csv", col_names = TRUE, n_max = 0))
# Read just the first line (header) of the LABELS CSV as a plain string
header_line <- read_lines("data/raw/MindSkinVer40_DATA_LABELS_2025-01-22_1419.csv", n_max = 1)
# Split the header string on commas, handling quoted strings
label_names <- read.csv(text = header_line, header = FALSE, stringsAsFactors = FALSE) |>
as.character()
# Confirm result
label_names
# Make sure they align
stopifnot(length(colnames(redcap_raw)) == length(label_names))
# Create a raw label dictionary
label_dictionary <- tibble(
variable_name = colnames(redcap_raw),
label = label_names
)
# Save the dictionary
write_csv(label_dictionary, "data/metadata/label_dictionary_raw.csv")
# Remove any non-data events: logs, end-of-study summaries
redcap_filtered <- redcap_raw %>%
filter(!redcap_event_name %in% c("logs_arm_1", "end_of_study_arm_1"))
# Preview changes made
redcap_filtered
# Define variables to keep based on manual curation
keep_vars <- c(
"subject_id", "redcap_event_name", "reg_age", "reg_grp",
"hw_wght", "hw_hght", "dem_sex", "dem_eth",
"dem_ethwht", "dem_ethblck", "dem_ethasn", "dem_ethmix", "dem_ethoth",
"dem_ukdiag1", "dem_ukdiag2", "dem_ukdiag3", "dem_ukdiag4", "dem_ukdiag5", "dem_ukdiag6",
"ectrt_corti1", "ectrt_corti1cls", "ectrt_add1", "ectrt_corti1cls_2", "ectrt_add2", "ectrt_corti1cls_3",
"ectrt_calci1", "ectrt_cakci1drg", "ectrt_calci2", "ectrt_cakci2drg_2", "ectrt_calci3", "ectrt_cakci3drg_3",
"ectrt_st", "ectrt_st_add1",
"mh_asthma", "mh_rhino", "mh_fdalle", "mh_ctalle", "mh_slpdist",
"sbfa_twel", "sbfa_twel_det2", "sbfa_arm_flux1", "sbfa_arm_flux2", "sbfa_arm_flux3",
"sbfa_arm_cur", "sbfa_temp", "sbfa_humidity",
"sbfa_ph", "sbfa_ph_det", "sbfa_ph1", "sbfa_ph2", "sbfa_ph3",
"se_easi", "bmsi_adverse_score", "bmsi_capable_score", "bmsi_response_score",
"btms_bm_score", "btms_bthreat_score", "btms_tscore",
"vas_score", "skinqol_used", "skinqol_score", "patientreported_quality_of_life_measures_complete",
"sdc_srbd_scale", "sdc_sleepiness_scale", "sdc_restless_leg_scale",
"sdc_mtainsc", "sdc_mtainsc_tscore",
"sdsc_breath", "sdc_breath_tscore", "sdsc_arousal", "sdc_arousal_tscore",
"sdsc_transit", "sdc_transit_tscore", "sdsc_somnol", "sdc_somnol_tscore",
"sdsc_hyper", "sdc_hyper_tscore", "sdsc_tscore", "total_t_score",
"ehi_tscore", "wasi_fsiq4", "gonogo_resp", "simon_presp",
"cpt_prerrors", "mack_mskips", "mack_iskips"
)
# Subset only the selected variables
redcap_core_vars <- redcap_filtered %>%
select(all_of(keep_vars))
# View preview
redcap_core_vars
# Save cleaned core dataset
write_csv(redcap_core_vars, "data/cleaned/redcap_core_vars.csv")
# Load label dictionary
label_dict <- read_csv("data/metadata/label_dictionary_clean.csv")
# Create a named vector for renaming: names = new (clean), values = current (snake_case)
rename_vector <- setNames(label_dict$snake_case, label_dict$clean)
# Safety check: preview which columns will be renamed
matched_cols <- intersect(names(rename_vector), colnames(redcap_core_vars))
cat("Columns that will be renamed:\n")
print(rename_vector[matched_cols])
# Rename the columns
redcap_clean_labels <- redcap_core_vars %>%
rename(any_of(rename_vector))
# Preview result
redcap_clean_labels
unique(redcap_clean_labels$visit_number)
unique(redcap_clean_labels$visit_number)
# Clean subject_id and redcap_event_name, save as new object
redcap_clean <- redcap_clean_labels %>%
mutate(
# Convert subject_id like "728-X" → "MSXX"
subject_id = str_pad(str_extract(subject_id, "\\d+$"), width = 2, pad = "0"),
subject_id = paste0("MS", subject_id),
# Convert visit_number (already renamed) into numeric ID: 1 = baseline, 2 = follow-up
visit_number = case_when(
visit_number == "baseline__visit_1_arm_1" ~ 1L,
visit_number == "6_month_followup_arm_1" ~ 2L,
TRUE ~ NA_integer_
)
)
# Preview to ensure changes made
redcap_clean
# Save cleaned dataset
write_csv(redcap_clean, "data/cleaned/redcap_clean.csv")
getwd()
getwd()
getwd()
luna_raw <- ldb("/../../data/processed/luna_outputs/dreem_raw.db")
library(luna)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(readr)
library(stringr)
library(lubridate) # for working with dates
library(scales)   # to access breaks/formatting functions
library(gridExtra)
library(tidyr)
library(luna)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(readr)
library(stringr)
library(lubridate) # for working with dates
library(scales)   # to access breaks/formatting functions
library(gridExtra)
library(tidyr)
luna_raw <- ldb("/../../data/processed/luna_outputs/dreem_raw.db")
luna_raw <- ldb("/../../data/processed/luna_outputs/dreem_raw.db")
luna_raw <- ldb("/Users/ellajadealex/Desktop/Mind_Skin_Dissertation/Dreem_Test/data/processed/luna_outputs/dreem_raw.db")
View(luna_raw)
View(luna_raw)
# Load the original file
df <- read.csv("sleepdevices_dates.csv", check.names = FALSE, row.names = 1)
# Transpose
df_t <- t(df)
# Save to new file
write.csv(df_t, "sleepdevices_dates_transposed.csv", quote = TRUE)
# Transpose
df_t <- t(df)
# Load the original file
df <- read.csv("sleepdevices_dates.csv", check.names = FALSE, row.names = 1)
getwd()
setwd(Users/ellajadealex/Desktop/Mind_Skin_Dissertation/Dreem/data/processed/metadata)
getwd()
setwd(Desktop/Mind_Skin_Dissertation/Dreem/data/processed/metadata)
getwd()
setwd(/Desktop/Mind_Skin_Dissertation/Dreem/data/processed/metadata)
setwd(Desktop/Mind_Skin_Dissertation/Dreem/data/processed/metadata)
setwd(~Desktop/Mind_Skin_Dissertation/Dreem/data/processed/metadata)
getwd()
setwd(Desktop/Mind_Skin_Dissertation/Dreem/data/processed/metadata)
setwd("~/Desktop/Mind_Skin_Dissertation/Dreem/data/processed/metadata")
# Load the original file
df <- read.csv("sleepdevices_dates.csv", check.names = FALSE, row.names = 1)
# Transpose
df_t <- t(df)
# Save to new file
write.csv(df_t, "sleepdevices_dates_transposed.csv", quote = TRUE)
---
title: "Dreem Analysis"
---
title: "Dreem Analysis"
---
title: "Dreem Analysis"
---
title: "Dreem Analysis"
library(luna)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(readr)
library(stringr)
library(lubridate) # for working with dates
library(scales)   # to access breaks/formatting functions
library(gridExtra)
library(tidyr)
getwd()
getwd()
this_dir <- dirname(normalizePath(sys.frame(1)$ofile))  # for Rscript only
this_dir <- dirname(normalizePath(commandArgs(trailingOnly = FALSE)[grep("--file=", commandArgs(trailingOnly = FALSE))]))
getwd()
getwd()
setwd(../../../)
setwd()
setwd("../../")
getwd()
setwd("../../../")
getwd()
setwd("../../")
getwd()
setwd("ellajadealex")
getwd()
setwd("Desktop/Mind_Skin_Dissertation/Dreem/scripts")
getwd()
setwd("preprocessing")
getwd()
# Load libraries
library(dplyr)
library(readr)
library(stringr)
# === Paths (relative to this script) ===
redcap_path  <- "../../../Redcap/data/cleaned/redcap_clean.csv"
lst_path     <- "../../data/processed/sample_list/min_4hr_edf.lst"
output_path  <- "../../data/processed/metadata/id_group_map.csv"
# === Read REDCap data ===
redcap <- read_csv(redcap_path, show_col_types = FALSE) %>%
select(subject_id, group) %>%
distinct()
# === Read .lst file ===
lst <- read_lines(lst_path)
# Extract standard IDs from paths (e.g., "MS01_V1_N1")
standard_ids <- str_extract(lst, "[^/]+(?=\\.edf$)")
participant_ids <- str_extract(standard_ids, "MS\\d+")
# Build metadata table
metadata <- tibble(
standard_id = standard_ids,
subject_id  = participant_ids
) %>%
left_join(redcap, by = "subject_id") %>%
select(standard_id, group)
# === Write to CSV ===
write_csv(metadata, output_path)
cat("Metadata written to:", output_path, "\n")
# === Paths (relative to this script) ===
redcap_path  <- "../../../Redcap/data/cleaned/redcap_clean.csv"
lst_path     <- "../../data/processed/sample_list/min_4hr_edf.lst"
output_path  <- "../../data/processed/metadata/id_group_map.csv"
# Read and clean REDCap
redcap <- read_csv(redcap_path, show_col_types = FALSE) %>%
select(subject_id, group) %>%
mutate(subject_id = toupper(trimws(subject_id))) %>%
distinct()
# Read .lst file
lst <- read_lines(lst_path)
# Extract IDs
standard_ids    <- str_extract(lst, "[^/]+(?=\\.edf$)")
participant_ids <- str_extract(standard_ids, "MS\\d+")
# Merge
metadata <- tibble(
standard_id = standard_ids,
subject_id  = participant_ids
) %>%
left_join(redcap, by = "subject_id") %>%
select(standard_id, group)
# Debug prints
cat("Script directory:", this_dir, "\n")
cat("REDCap file:", redcap_path, "\n")
cat(".lst file:", lst_path, "\n\n")
cat("Standard IDs:\n")
print(head(standard_ids))
getwd()
library(luna)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(readr)
library(stringr)
library(lubridate) # for working with dates
library(scales)   # to access breaks/formatting functions
library(gridExtra)
library(tidyr)
luna_raw <- ldb("/../../data/processed/luna_outputs/dreem_raw.db")
luna_raw <- ldb("/../../data/processed/luna_outputs/dreem_chep_psd_sigstats.db")
chep_psd_sigstats <- ldb("/../../data/processed/luna_outputs/dreem_chep_psd_sigstats.db")
chep_psd_sigstats <- ldb("../../data/processed/luna_outputs/dreem_chep_psd_sigstats.db")
getwd()
# Read and clean REDCap
redcap <- read_csv(redcap_path, show_col_types = FALSE) %>%
select(subject_id, group) %>%
mutate(subject_id = toupper(trimws(subject_id))) %>%
distinct()
# Read .lst and filter for EDF entries only
lst <- read_lines(lst_path)
lst_edf <- lst[grepl("\\.edf$", lst)]
# Extract IDs from paths
standard_ids    <- str_remove(basename(lst_edf), "\\.edf$")
participant_ids <- str_extract(standard_ids, "MS\\d+")
# === Paths (relative to this script) ===
redcap_path  <- "../../../Redcap/data/cleaned/redcap_clean.csv"
lst_path     <- "../../data/processed/sample_list/min_4hr_edf.lst"
output_path  <- "../../data/processed/metadata/id_group_map.csv"
# Read and clean REDCap
redcap <- read_csv(redcap_path, show_col_types = FALSE) %>%
select(subject_id, group) %>%
mutate(subject_id = toupper(trimws(subject_id))) %>%
distinct()
View(redcap)
# Read .lst and filter for EDF entries only
lst <- read_lines(lst_path)
lst_edf <- lst[grepl("\\.edf$", lst)]
lst_path     <- "../../data/processed/sample_list/all_edf.lst"
# Read .lst and filter for EDF entries only
lst <- read_lines(lst_path)
output_path  <- "../../data/processed/metadata/id_group_map.csv"
# Read .lst and filter for EDF entries only
lst <- read_lines(lst_path)
lst_edf <- lst[grepl("\\.edf$", lst)]
lst_edf <- lst[grepl("\\.edf$", lst)]
# === Paths (relative to this script) ===
redcap_path  <- "../../../Redcap/data/cleaned/redcap_clean.csv"
lst_path     <- "../../data/processed/sample_list/all_edf.lst"
output_path  <- "../../data/processed/metadata/id_group_map.csv"
# === Load REDCap data ===
redcap <- read_csv(redcap_path, show_col_types = FALSE) %>%
select(subject_id, group) %>%                      # Keep only ID and group
mutate(subject_id = toupper(trimws(subject_id))) %>%  # Clean: uppercase & remove spaces
distinct()                                         # Drop any duplicate rows
View(redcap)
# === Load list of EDFs ===
lst <- read_lines(lst_path)
# === Extract IDs ===
standard_ids    <- str_remove(basename(lst), "\\.edf$")  # Remove .edf extension
# === Extract IDs ===
standard_ids    <- str_remove(basename(lst), "\\.edf$")  # Remove .edf extension
participant_ids <- str_extract(standard_ids, "MS\\d+")   # Extract MS ID (e.g., MS01)
# === Join with REDCap data ===
metadata <- tibble(
standard_id = standard_ids,
subject_id  = participant_ids
) %>%
left_join(redcap, by = "subject_id") %>%     # Add group from REDCap
filter(!is.na(group)) %>%                    # Drop entries not found in REDCap
select(standard_id, group)
# === Write output ===
write_csv(metadata, output_path)
cat("Metadata written to:", output_path, "\n")
lst_path     <- "../../data/processed/sample_list/min_4hr_edf.lst"
# === Load list of EDFs ===
lst <- read_lines(lst_path)
# === Extract IDs ===
standard_ids    <- str_remove(basename(lst), "\\.edf$")  # Remove .edf extension
# === Extract IDs ===
standard_ids <- str_remove(basename(lst), "\\.(edf|eannot)$")
participant_ids <- str_extract(standard_ids, "MS\\d+")   # Extract MS ID (e.g., MS01)
# === Join with REDCap data ===
metadata <- tibble(
standard_id = standard_ids,
subject_id  = participant_ids
) %>%
left_join(redcap, by = "subject_id") %>%     # Add group from REDCap
filter(!is.na(group)) %>%                    # Drop entries not found in REDCap
select(standard_id, group)
# === Write output ===
write_csv(metadata, output_path)
cat("Metadata written to:", output_path, "\n")
View(chep_psd_sigstats)
View(chep_psd_sigstats)
# Load in the Database
chep_psd_sigstats <- ldb("../../data/processed/luna_outputs/dreem_chep_psd_sigstats.db")
setwd("../../")
```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "../../")
knitr::opts_knit$set(root.dir = "../../")
# Load in the Database
chep_psd_sigstats <- ldb("data/processed/luna_outputs/dreem_chep_psd_sigstats.db")
../../
getwd()
getwd()
getwd()
# Get the directory of the current Quarto file and go two levels up to Dreem/
this_file <- knitr::current_input()
dreem_dir <- normalizePath(file.path(dirname(this_file), "..", ".."))
setwd("../../")
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../../")
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../../")
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../../")
getwd()
require("knitr")
opts_knit$set(root.dir = "../../")
require("knitr")
opts_knit$set(root.dir = "../../")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../../")
getwd()
getwd()
require("knitr")
opts_knit$set(root.dir = "../../")
getwd()
install.packages("here")
library(here)
getwd()
chep_psd_sigstats <- ldb(here("Dreem", "data", "processed", "luna_outputs", "dreem_chep_psd_sigstats.db"))
View(chep_psd_sigstats)
# Extract per-frequency PSD (for spectral curves)
psd <- chep_psd_sigstats$PSD$CH_F
# Extract per-epoch SIGSTATS (for band power analysis)
sig <- chep_psd_sigstats$SIGSTATS$CH_E
# Load group assignment metadata
groups <- readr::read_csv("../../data/processed/metadata/id_group_map.csv")
# Join group metadata to PSD data
psd <- psd %>%
rename(standard_id = ID) %>%
left_join(groups, by = "standard_id")
# Join group metadata to SIGSTATS data
sig <- sig %>%
rename(standard_id = ID) %>%
left_join(groups, by = "standard_id")
psd_n3 <- psd %>%
filter(ST == "N3")
names(chep_psd_sigstats)
names(chep_psd_sigstats$PSD)
chep_psd_sigstats_stage <- ldb("../../data/processed/luna_outputs/dreem_chep_psd_sigstats_stage.db")
View(chep_psd_sigstats)
View(chep_psd_sigstats_stage)
destrat dreem_chep_psd_sigstats_stage.db
dreem_psd_by_stage <- ldb("../../data/processed/luna_outputs/dreem_psd_by_stage.db")
psd_n3 <- psd %>%
filter(STAGE == "N3")
# Extract per-frequency PSD (for spectral curves)
psd <- dreem_psd_by_stage$PSD$CH_F
# Extract per-epoch SIGSTATS (for band power analysis)
sig <- dreem_psd_by_stage$SIGSTATS$CH_E
# Load group assignment metadata
groups <- readr::read_csv("../../data/processed/metadata/id_group_map.csv")
# Join group metadata to PSD data
psd <- psd %>%
rename(standard_id = ID) %>%
left_join(groups, by = "standard_id")
# Join group metadata to SIGSTATS data
sig <- sig %>%
rename(standard_id = ID) %>%
left_join(groups, by = "standard_id")
# Extract per-frequency PSD (for spectral curves)
psd <- chep_psd_sigstats$PSD$CH_F
# Extract per-epoch SIGSTATS (for band power analysis)
sig <- chep_psd_sigstats$SIGSTATS$CH_E
# Load group assignment metadata
groups <- readr::read_csv("../../data/processed/metadata/id_group_map.csv")
# Join group metadata to PSD data
psd <- psd %>%
rename(standard_id = ID) %>%
left_join(groups, by = "standard_id")
# Join group metadata to SIGSTATS data
sig <- sig %>%
rename(standard_id = ID) %>%
left_join(groups, by = "standard_id")
names(chep_psd_sigstats)
names(chep_psd_sigstats$PSD)
View(chep_psd_sigstats)
View(chep_psd_sigstats_stage)
View(chep_psd_sigstats)
View(chep_psd_sigstats_stage)
View(chep_psd_sigstats)
View(groups)
View(dreem_psd_by_stage)
psd_n3 <- psd %>%
filter(STAGE == "N3")
View(sig)
